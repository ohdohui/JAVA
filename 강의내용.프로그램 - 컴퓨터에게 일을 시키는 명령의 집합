1.프로그램 - 컴퓨터에게 일을 시키는 명령의 집합
2.컴파일 - 실행 속도가 빠르다
(프로그램 언어(사람이 인식할 수 있는 문장)->기계가 인식할 수 있는 언어)

인터프리터 언어 -> 한줄 한줄 해석

4.장점
플랫폼에 종속되지 않는 프로그램을 개발할 수 있다
C,C++ 컴파이러(인도우즈 컴파일러,리눅스 컴파일러)

자바코드 ->JVM 중간 언어 컴파일 .class ->플랫폼에 맞는 바이트코드
JVM (Java Vrtual Machine)

객체 지향 언어
모든 프로그램이 클래스 형태로 구현되어 있다.

객체- 여러 객체의 협력을 통해 프로그램을 구현하는 것 입니다.
(상호작용) 

객체 -> 사물,대상(object)
게시판 - 게시판 관련 객체, 회원관련 객체
        -게시글 작성+회원 데이터
        -게시글 조회(게시판 객체) + 회원의 접속권한(회원객체)

프로그램이 안정적이다.
C,C++ - 메모리에 올리면, 프로그래머가 적절하게 메모리에 제거
객체 -> 힙 -> 제거 프로그래머(메모리 누수..성능 저하)

Java -> 메모리 관리를 자동(객체 --> 힙 --> 자동으로 제거)
        가비지 콜렉터

        person person1 = new Person ();
        person person2 = new person();

        person2 = person1;

        person2의 기존 인스턴스와 연결x

포인터를 사용하지 않는다

풍부한 기능을 제공하는 오픈 소스다
JDK - Java Development Kit
오픈소스 - 15
8버전 

자바 사용 범위
웹서버, 앱(안드로이드 앱), ...
데스크탑 애플리케이션(java,awt,javax.swing)

설치

환경 변수
JAVA_HOME - 설치되어 있는 JDK 경로(C:\Program Files\Java\jdk-16.0.2)
%JAVA_HOME%

CLASS_PATH =%JAVVA_HOME%lib;

에디터 - 이클립스

src - 자바소스(.java)
bin - 컴파일된 자바 클래스 파일(.class)

java -> 컴파일된 class 파일을 실행하는 명령 프로그램
java 패키지명.파일명

javac -> 컴파일하여 class 파일을 만드는 명령 프로그램

세미콜론(;) -> 문장이 끝나는 부분에 위치

주석
한줄주석 //
여러줄 주석 /* ~ */ #

36P 1분복습
1) //
2) ;
3) }

시험은 연습문제에서 
37p 
1)컴파일
2)객체지향언어
3)JVM
자바소스 -> JVM(.class 컴파일 - 중간언어) -> 플랫폼에 맞는 바이트 코드로 변환
4)JDK -Java Development Kit
5)JRE -Java Runtime Eviron...(환경)


02/변수와 자료형
컴퓨터 내부에서 수를 표현하는 방법
0,1 -2진수
1byte -8bit(0,1 표현되는 자리수가 8개)
2byte - 16bit(0,1 표현되는 자리수가 16개)
4byte -32bit(0,1 표현되는 자리수가 32개)
8byte -64bit(0,1 표현되는 자리수가 64개)

32(10진수) ->2진수(100000)
10진수,8진수,16진수
해시 -> 16진수

변수 - 변하는 수
    -공간을 가지고 있는 변하는 수
    -이런 공간의 이름을 변수

변수
    var,const,let(typescript - 자료형 명시)
    (long,double)

자료형(숫자,문자인,논리값...) 변수명 ->변수를 선언한다
int num; -> 정수형 변수명 num
char ch; -> 문자형 변수형 ch

변수를 선언하면 변수를 담을 공간(메모리가 할당이 된다)
자료형에 따라서 다른 공간 메모리를 할당 받습니다.
int - 4byte 

정수형
byte - 1byte -8bit
short -2byte -16bit
int -4byte -32bit(2진수 32칸)
long -8byte -64bit()
 -기본적으로 int기준(byte num=1; -> 내부적으로 int num = 1로 처리후 ->byte로 변환)

실수형(소수점이 있는 자료형)
float -4byte
double -8byte

-기본적으로 double 기준(float num =1.0 -> 내부적으로는 double num=1.0 -> float로 변환)

문자
char -2byte

int num; //선언
num = 10; //10값을 num에 대입(복사) -대입// 초기화

int num =10; //초기화 - 처음 변수에 값을 대입

package - 소스 코드의 묶음 -> 폴더

변수 초기화
변수 선언 후에 처음 값을 대입
int num;
num =10;
int num =10;

47p
1분복습
int year =2018;

변수의 이름정하기
1)변수명은 영문자(대소문자),숫자를 사용한다.
    (+ @)
2)숫자로는 시작 X
3)자바에서 이미 사용 중인 예약어는 사용X(while,int,break,continue,switch...)

카멜케이스 noOfStudent - 관례 - 변수,메서드명

파스칼케이스 NoOfStudent -클래스명

int Num#1
int num$10
int _num

변수와 메모리
int num; -> num 공간(4byte - 32bit)

49페이지 하단 
int -- 2^31~ -2^31 -1
        (32bit -> 31bit -> 첫 비트 -부호 -0 양수, 1 음수)
        -1 --> 0

byte - 1byte - 8bit (-2^7~2^7 -1) -128~127

자료형의 공간 크기 
byte - 1byte -8bit (정수) (-128~127)
boolean -1byte -8bit 
short -2byte -16bit(정수)(-2^15~2^15 -1)
char -2byte -16bit(문자 -> 숫자 ->양수만 표현)
int -4byte -32bit(정수) - 시스템에서 기본 인식 자료형
                    (-2^31~2^31 -1)
float -4byte -32bit(실수)
long -8byte -64bit(정수)
double -8byte -64bit(실수) - 시스템에서 기본 인식 자료형
char ch='A';
char ch=65;

정수형
1.byte -1바이트 
2.short -2바이트
3.int -4바이트
-가장 많이 사용되는 자료형
-모든 정수형자료는 int로 인식 ->변환
-int로 지정하면 변환X ->효율적이다
P51 
4.long -8바이트
-정수를 표현하는 가장 큰 자료형
-모든 정수값을 기본으로 int형으로 처리 ->이를 넘어서는 숫자 범위 
->오류발생 ->처음부터  long으로 처리하라고 명시(L,l)

long num = 12345678900L;
long num = 10;

문자형
char -2바이트
    -문자 -> 내부적으로 정수로 처리(양수로만 구성된)
    작은따옴표(문자1개)
    예) 문자여러개 ->char X -> 문자열(큰 따옴표)
    예) 형변환(현재 자료형을 다른 자료형으로 변환)
    int -> char
    int ch = 65;
    char ch2 =(char)ch;

    char ch ='A';

    Sting text ="ABCD";
                (ABCD\0)
    String text2 ="A"; ->A\0 ->\0 -NULL -> 문자열이 끝났음을 표시

    UTF-16 -EUC-KR(한글 2바이트)

    UTF-8 - 한글 3바이트(웹에서는 대부분 UTF-8)

    실수형(소수점 - 부동소수점)
    float -4byte, 32 bit

    double -8byte -64bit - 시스템에서 기본으로 double로 먼저 처리

    Float 기본으로 인식 안한다. ->(F,f 문자를 끝에 추가)

    long num =100000;
            (int) -> 작은 -> 큰자료형 -> 자동 변환
    
    float num =3.14F;
                double -

부동 소수점 방식의 오류발생(실수) BigDecimal 
->2진수로 소수를 표현하는 방식(한계) -> 정확도 문제
->정확도의 보장 범위
->double ->8byte ->64bit -> 정확도의 범위가 float 보다는 크다

논리형
boolean -1byte,true,false 

자료형 없이 변수 선언하기
1.지역변수로만 사용
2.자료형이 다른 값은 입력 X

var로 지정하면 ->컴파일시에 자동으로 변환
String -> String 객체

상수 
-변하지 않는 수
final 키워드가 추가 되면 상수

상수명 -> 관례 -> 대문자로 기입, 단어와 단어 사이는 _를

참고)
변수 final -> 상수
메서드 final -> 재정의 불가
클래스명 final -> 상속 불가

상수는 변하지 않는 값

상수를 선언하고,처음 값을 대입하는것은 가능

기본 자료형 마다 상수풀
long num = 123456789012; int 상수풀에서 해당 숫자를 찾는다-> 숫자X -> 오류발생
long 상수풀에서 숫자를 찾아야 한다
-> L,l 
long num = 123456789012L;

형변환
변수의 자료형이 다르면 동일하게 맞춰주는 것
1.묵시적 형변환(자동 형변환)
작은자료형 -> 큰자료형으로 변환
byte num = 10;
int num2 = num; (int형이 byte형보다 크므로 num가 자동으로 int로 변환
 - 자료 손실이 발생하지 않으므로)
2)덜 정밀한 자료형 -> 더 정밀한 자료형
정수보다 실수가 더 정밀(정수를 실수에 대입 -> 자동 형변환)
3)연산중 자동 형변환
정수/실수
int/float -> 결과가 float형태로 변환
2.명시적 형변환(강제 형변환)
큰자료형 -> 작은자료형으로 변환 (손실 발생 가능성)

더 정밀한 자료형 -> 덜 정밀한 자료형(손실 발생 가능 o)
실수 --> 정수

char -> 2byte
정수형
(int)ch1
int ch2 = 67;
(char)ch2

자료형
1) 기본 자료형 (int char, boolean... 숫자,문자,논리값..)
2) 참조 자료형(인스턴트 자료형)
    Person person = new Person();

    String text1 = "ABCD";

기본연산자
항-연산에 사용되는 값
단항,이항(num1 + num2),삼항 (삼항 조건 연산자) (조건식)?참일때:거짓일때
(+ +num)

1)대입연산자
(=)
int num = 10; 대입(복사,저장,연산의 최종 결과를 대입)
-가장 나중에 연산이 된다(연산자의 우선순위가 가장 낮다)

int result = 10+20*10-20;

2)부호연산자
(+,-)
--> 부호가 변경(음수->양수, 양수->음수)

3)산술연산자
(+,-,/,*,%)
%-나눈 나머지
20%10 ->0
홀수 짝수 ->숫자 % 2 --나머지가 1이면 ->홀수,아니면 짝수

산술 연산의 우선순위
+ - / * %

totalScore / 2.0 -> double
float 2.0F

3)증감연산자
단항 연산자 <-- 이항연산자 보다 우선순위가 높다
++num
num++
--num;
num--;

int num = 1;
int num2 = ++num; -> num + 1 -> num2 = num
int num2 = num++; -> num2 = num --> num+1

4)관계 연산자(비교 연산자)
>,>=,<,<=,==,!=

반환값 논리값(true,false)
조건문,반복문에서 많이 쓰인다.

boolean value = myAge >25;

5)논리연산자
OR -논리합 -||
AND -논리곱 -&&
NOT -부정 -!

우선순위
논리연산자 < 관계(비교) 연산자

우선순위가 관계연산자 보다 낮으므로 관계연산자를 여러개 연결해서 사용하는데 주로 사용된다.
(num>10)&&num<100

부정
true -> false
false -> true

참조) 자바스크립트에서 논리연산자의 반환값
(논리값X->조건에 해당되는 값)
const num = num || 10; //기본값

자바 -> 논리값(true,false)

동일한점
boolean result = true 조건 || false 조건;
boolean result = false 조건 || true,false 조건;

boolean result = true 조건 && false 조건;
boolean result = false 조건 && true,false 조건;

단락 회로 평가p78

6)복합 대입연산자
(대입,산술 복합적으로 연결되어)
+=
-=

int num = num +1;//num+ =1; //++num;
int num = num*2;//num*=2;

num1 = num1+5; //num1+= 5;
num1 = num1*num2; // num1*=num2;

7)조건연산자(삼항연산자,삼항조건연산자)
(조건식)?참일때:거짓일때;

우선순위
가장 높은 우선순위()
관계(비교연산자)
논리연산자
가장 낮은 우선순위 =

비트연산자
-비트단위로 연산이 이뤄지는 연산자
비트?
8bit ->비트가 8개
-2진수 연산
&(AND) - 두개의 비트값이 모두 1인 경우에만 연산의 결과가 1이 되는 연산
int num1 = 5;
int num2 = 10;

| (OR) -비트값이 하나라도 1이면 1

^(XOR)연산자
같은 값이면 0, 다른값이면 1

~ 연산자(반전) 1은 0, 0은 1로 변경

1byte - 8bit - 첫번째 비트 -> 부호(0 -양수, 1- 음수)
